plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'jacoco'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
}
ext {
    set('awsSdkVersion', '1.12.132')
    set('springCloudVersion', '2022.0.4')
    set('identityCommonsVersion', '2.0.0')
    set('identityCdcVersion', '1.0.2')
    set('groovyVersion', "3.0.19")
    //  set('spockVersion', "2.4-M1-groovy-3.0")
}
group 'org.example'

java {
    sourceCompatibility = '21'
}

repositories {

    maven { url 'https://ha-us.dso.thermofisher.net/artifactory/tfcom-maven-internal/' }
    maven { url 'https://ha-us.dso.thermofisher.net/artifactory/techops-maven-internal/' }
    maven {
        url "https://ha-us.dso.thermofisher.net/artifactory/eagles-gradle-internal"
    }
   // mavenCentral()
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

springBoot {
    buildInfo()
    // allow generating build information containing the coordinates, name, and version of the project. Check /actuator/info endpoint
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.amazonaws:aws-java-sdk-bom:${awsSdkVersion}"
    }
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation 'org.codehaus.groovy:groovy-all:3.0.19'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.19'
    implementation 'com.gigya:gigya-sdk:3.2.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.12.558'
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'
    implementation 'com.amazonaws:aws-java-sdk-secretsmanager'
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation "com.thermofisher.identity:identity-commons-cdc-lib:${identityCdcVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'au.com.dius:pact-jvm-provider-junit5_2.12:3.6.15'
    implementation "com.thermofisher.platform:tfcom-observability:1.0.0"
    testImplementation 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation group: 'org.json', name: 'json', version: '20230618'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
}
bootRun {
    systemProperty 'spring.profiles.active', 'test'
}


testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.7.2')
        }
    }
}
bootJar {
    archiveBaseName = "cdcam"
}
jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('reports/coverage')
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/coverage')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/dto/*'
                                        , '**/configs/*'
                                        , '**/enums/*'
                                        , '**/service/aws/*'
                                        , '**/service/ICDCService*'
                                        , '**/properties/*'
                                        , '**/exceptions/*'
                                        , '**/utils/*'
                                        , 'com/thermofisher/identity/federation/FederationApp*'])
        }))
    }
}
jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/cdcam/aws/*'
                                        , '**/cdcam/enums/*'
                                        , '**/cdcam/services/SecretsService.*'
                                        , '**/cdcam/services/JWTValidator.*'
                                        , '**/cdcam/services/HttpService.*'
                                        , '**/cdcam/CorsFilterConfig.*'
                                        , '**/cdcam/builders/GSRequestFactory.*'])


        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}
wrapper {
    distributionUrl = "https://services.gradle.org/distributions/gradle-8.2.1-all.zip"
}